create table USERS (
id number(10) primary key,
name varchar2(30) not null,
email varchar2(40) unique not null,
password varchar2(30) not null);

CREATE SEQUENCE users_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER users_id_trig
  BEFORE INSERT ON USERS
  FOR EACH ROW
BEGIN
  SELECT users_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER users_id_trigger; 
DROP sequence users_id_sequence;

##############################################################################################

create table patient (
id number(10) unique,
gender varchar2(2) not null,
Address varchar2(60) not null,
dob date not null);

CREATE SEQUENCE patient_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER patient_id_trig
  BEFORE INSERT ON patient
  FOR EACH ROW
BEGIN
  SELECT patient_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER patient_id_trigger; 
DROP sequence patient_id_sequence;

##############################################################################################

create table Health_Supporter (
id number(10),
Phone_number varchar2(10) unique not null);

CREATE SEQUENCE H_S_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER H_S_id_trig
  BEFORE INSERT ON Health_Supporter
  FOR EACH ROW
BEGIN
  SELECT H_S_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER H_S_id_trigger; 
DROP sequence H_S_id_sequence;

##############################################################################################

create table Well_Patient (
id number(10) primary key,
PID number(10) unique,
HSID1 number(10),
HSID2 number(10));

CREATE SEQUENCE well_pat_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER well_pat_id_trig
  BEFORE INSERT ON well_patient
  FOR EACH ROW
BEGIN
  SELECT well_pat_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

Alter table Well_Patient add id number(10) primary key;

DROP TRIGGER well_pat_id_trig; 
DROP sequence well_pat_id_seq;

##############################################################################################

create table HS_Authorization (
id number(10) primary key,
PID number(10),
HSID number(10),
unique (PID, HSID),
auth_date date not null);
commit;

CREATE SEQUENCE H_S_Auth_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER H_S_Auth_id_trig
  BEFORE INSERT ON HS_Authorization
  FOR EACH ROW
BEGIN
  SELECT H_S_Auth_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER H_S_Auth_id_trig; 
DROP sequence H_S_Auth_id_seq;
##############################################################################################

create table Sick_Patient (
id number(10) primary key,
PID number(10) unique,
HSID1 number(10) not null,
HSID2 number(10));

CREATE SEQUENCE Sick_Pat_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Sick_Pat_Id_Trig
  BEFORE INSERT ON Sick_Patient
  FOR EACH ROW
BEGIN
  SELECT Sick_Pat_Id_Seq.nextval
  INTO :new.id
  FROM dual;
END;

Alter table Sick_Patient add id number(10) primary key;

DROP TRIGGER Sick_Pat_Id_Trig; 
DROP sequence Sick_Pat_Id_Seq;
##############################################################################################

create table Disease_Type (
ID number(10) primary key,
Disease_Name varchar2(20) unique not null);

CREATE SEQUENCE disease_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER disease_id_trig
  BEFORE INSERT ON Disease_Type
  FOR EACH ROW
BEGIN
  SELECT disease_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER disease_id_trigger; 
DROP sequence id_sequence;

##############################################################################################

create table Diagnosis (
ID number(10) primary key,
PID number(10) not null,
DID number(10) not null,
Diagnosis_Date Timestamp not null);

CREATE SEQUENCE diagnosis_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER diagnosis_id_trig
  BEFORE INSERT ON Diagnosis
  FOR EACH ROW
BEGIN
  SELECT diagnosis_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER diagnosis_id_trigger; 
DROP sequence diagnosis_id_sequence;

##############################################################################################

create table Observation_Type (
ID number(10) primary key,
Name varchar2(30) unique,
observ_metric varchar2(20));

CREATE SEQUENCE Obs_Type_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Obs_Type_Id_Trig
  BEFORE INSERT ON Observation_Type
  FOR EACH ROW
BEGIN
  SELECT Obs_Type_Id_Seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER Obs_Type_Id_Trigger; 
DROP sequence Obs_Type_Id_Sequence;

##############################################################################################

create table Nominal_Observation_Type (
ID number(10) primary key,
PID number(10),
DID number(10),
OID number(10),
Upper_Limit number(10) not null,
Lower_Limit number(10) not null,
Frequency number(10) not null,
Freq_Type varchar2(20) not null);

CREATE SEQUENCE Nom_Obs_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER nom_obs_id_trig
  BEFORE INSERT ON Nominal_Observation_Type
  FOR EACH ROW
BEGIN
  SELECT Nom_Obs_Id_Seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER nom_obs_id_trigger; 
DROP sequence nom_obser_type_id_seq;

##############################################################################################

create table Ordinal_Observation_Type (
ID number(10) primary key,
PID number(10),
DID number(10),
OID number(10),
expected varchar2(20),
Frequency varchar2(20) not null,
Value varchar2(20) not null);

CREATE SEQUENCE ord_obs_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER ord_obs_id_trig
  BEFORE INSERT ON Ordinal_Observation_Type
  FOR EACH ROW
BEGIN
  SELECT ord_obs_id_seq.nextval
  INTO :new.id
  FROM dual;
END;

DROP TRIGGER ord_obs_id_trigger; 
DROP sequence ord_obser_type_id_seq;
##############################################################################################

create table Records_Nom_Obs_Type (
NID number(10) primary key,
UserID number(10),
PID number(10),
OID number(10),
Readings number(10) not null,
Recording_Timestamp Timestamp not null,
Observation_Timestamp Timestamp not null);

alter table RECORDS_NOM_OBS_TYPE modify RECORDING_TIMESTAMP 'DD-MMM-YYYY HH24:MI:SS';

CREATE SEQUENCE Rec_Nom_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Rec_Nom_Id_Trig
  BEFORE INSERT ON Records_Nom_Obs_Type
  FOR EACH ROW
BEGIN
  SELECT Rec_Nom_Id_Seq.nextval
  INTO :new.ID
  FROM dual;
END;

##############################################################################################

create table Records_Ord_Obs_Type (
ID number(10) primary key,
UserID number(10),
PID number(10),
OID number(10),
Readings number(10) not null,
Recording_Timestamp Timestamp not null,
Observation_Timestamp Timestamp not null);

CREATE SEQUENCE Rec_Ord_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Rec_Ord_Id_Trig
  BEFORE INSERT ON Records_Ord_Obs_Type
  FOR EACH ROW
BEGIN
  SELECT Rec_Ord_Id_Seq.nextval
  INTO :new.ID
  FROM dual;
END;

##############################################################################################

create table Alert_Type (
ID number(10) primary key,
description vrchar2(30) not null);

CREATE SEQUENCE Alert_Type_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Alert_Type_Id_Trig
  BEFORE INSERT ON Alert_Type
  FOR EACH ROW
BEGIN
  SELECT Alert_Type_Id_Seq.nextval
  INTO :new.ID
  FROM dual;
END;
##############################################################################################
Alert
create table Alert (
ID number(10) primary key,
pid number(10) not null,
oid number(10) not null,
tid number(10) not null,
details varchar2(50) not null,
cleared char default '0' check(cleared in('0','1')));

drop table alert;

CREATE SEQUENCE Alert_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Alert_Id_Trig
  BEFORE INSERT ON Alert
  FOR EACH ROW
BEGIN
  SELECT Alert_Id_Seq.nextval
  INTO :new.ID
  FROM dual;
END;

############################################################################################
ORDINAL_OBSERVATION_VALUES

CREATE SEQUENCE Ord_Obs_Val_Id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Ord_Obs_Val_Trig
  BEFORE INSERT ON ORDINAL_OBSERVATION_VALUES
  FOR EACH ROW
BEGIN
  SELECT Ord_Obs_Val_Id_Seq.nextval
  INTO :new.ID
  FROM dual;
END;

##############################################################################################
Outside the limit alert:

CREATE OR REPLACE Procedure Nom_Alert_Outside_Proc
   ( noid_in IN number, pid_in IN number )

IS
   UpperObsId number;
   LowerObsId number;
   
   cursor c1 is
	select Distinct A.OID from(select R.Readings, R.NOID, N.OID, N.Upper_Limit, ROW_NUMBER() OVER (ORDER BY R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_NOM_OBS_TYPE R, NOMINAL_OBSERVATION_TYPE N where R.NOID=N.ID and R.NOID=noid_in and R.PID=pid_in) A 
where A.rownumber < 5 and A.Readings > A.Upper_limit;

  cursor c2 is
	select Distinct A.OID from(select R.Readings, R.NOID, N.OID, N.Lower_limit, ROW_NUMBER() OVER (ORDER BY R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_NOM_OBS_TYPE R, NOMINAL_OBSERVATION_TYPE N where R.NOID=N.ID and R.NOID=noid_in and R.PID=pid_in) A 
where A.rownumber < 5 and A.Readings < A.Lower_limit;

BEGIN
   open c1;
   fetch c1 into UpperObsId;
   IF UpperObsId IS NOT NULL then
	insert into ALERT(PID, OID, TID, Details) values(pid_in, UpperObsId, 1,'Above upperlimit');
   END IF;
	
	open c2;
   fetch c2 into LowerObsId;
   IF LowerObsId IS NOT NULL then
	insert into ALERT(PID, OID, TID, Details) values(pid_in, LowerObsId, 1,'Below lower limit');
	commit;
   END IF;
END;

drop procedure Alert_Outside_Proc;
####################################################################################################################
Nominal Low Activity Alerts

create or replace Procedure Nom_Alert_Low_Activity
   (pid_in IN number, dates_in IN DATE)

IS
  start_date DATE := TO_DATE(dates_in, 'dd-Mon-yy');
  
   cursor c1 is
	select N1.OID from NOMINAL_OBSERVATION_TYPE N1 where N1.ID IN (select A.NOID from(select R.RECORDING_TIMESTAMP, R.NOID, N.Frequency, ROW_NUMBER() over 
(partition by R.NOID order by R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_NOM_OBS_TYPE R, NOMINAL_OBSERVATION_TYPE N where R.NOID=N.ID and R.PID=pid_in) A where A.rownumber=1 and 
(A.RECORDING_TIMESTAMP ) < (start_date - A.Frequency) group by A.NOID);

BEGIN   
   FOR records in c1 LOOP
    insert into ALERT(PID, OID, TID, Details) values(pid_in, records.OID, 2,'Low Activity');
   END LOOP;
   commit;
   
END;

drop procedure Alert_Low_Activity;
#################################################################################################################### 
Ordinal outside alert
create or replace Procedure Ord_Alert_Outside_Proc
   ( oid_in IN number, pid_in IN number )

IS
   ObsId number;
   
   cursor c1 is
	select Distinct A.OID from(select R.Readings, R.OOID, O.OID, O.Expected, ROW_NUMBER() OVER (ORDER BY R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_ORD_OBS_TYPE R, ORDINAL_OBSERVATION_TYPE O where R.OOID=O.ID and R.OOID=oid_in and R.PID=pid_in) A 
where A.rownumber < 5 and A.Readings <> A.Expected;

BEGIN
   open c1;
   fetch c1 into ObsId;
   IF ObsId IS NOT NULL then
	insert into ALERT(PID, OID, TID, Details) values(pid_in, ObsId, 1,'Not expected Reading');
   END IF;
	
END;

######################################################################################################################
Ordinal Low Activity

create or replace Procedure Ord_Low_Activity
   (pid_in IN number, dates_in IN DATE)

IS
  start_date DATE := TO_DATE(dates_in, 'dd-Mon-yy');

   cursor c1 is
	select O1.OID from ORDINAL_OBSERVATION_TYPE O1 where O1.ID IN (select A.OOID from(select R.RECORDING_TIMESTAMP, R.OOID, O.Frequency, ROW_NUMBER() over 
(partition by R.OOID order by R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_ORD_OBS_TYPE R, ORDINAL_OBSERVATION_TYPE O where R.OOID=O.ID and R.PID=pid_in) A where A.rownumber=1 and 
(A.RECORDING_TIMESTAMP ) < (start_date - A.Frequency) group by A.OOID);

BEGIN   
   FOR records in c1 LOOP
    insert into ALERT(PID, OID, TID, Details) values(pid_in, records.OID, 2,'Low Activity');
   END LOOP;
   commit;
   
END;
######################################################################################################################
select N1.OID from NOMINAL_OBSERVATION_TYPE N1 where N1.ID = (select NOID from(select R.Readings, R.NOID, N.Upper_Limit, ROW_NUMBER() over 
(partition by R.NOID order by R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_NOM_OBS_TYPE R, NOMINAL_OBSERVATION_TYPE N where R.NOID=N.ID and R.USERID=1) A where A.rownumber < 5 and A.Readings > A.Upper_limit 4
group by A.NOID); 


CREATE OR REPLACE TRIGGER Alert_Outside_Lim_Trig
  After INSERT ON RECORDS_NOM_OBS_TYPE
  FOR EACH ROW
DECLARE
	ObsId number;
BEGIN
 select Distinct A.OID Into ObsId  from(select R.Readings, R.NOID, N.OID, N.Upper_Limit, ROW_NUMBER() OVER (ORDER BY R.RECORDING_TIMESTAMP desc) as rownumber 
from RECORDS_NOM_OBS_TYPE R, NOMINAL_OBSERVATION_TYPE N where R.NOID=N.ID and R.NOID=:new.NOID and R.PID=:new.PID) A 
where A.rownumber < 5 and A.Readings > A.Upper_limit;

 IF ObsId IS NOT NULL then
  insert into ALERT(PID, OID, TID, Details) values(:new.PID, ObsId, 1,'Above upperlimit');
 END IF;
END;

drop trigger Alert_Outside_Lim_Trig;
